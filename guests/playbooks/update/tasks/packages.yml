---
# Default to installing packages if state is not passed from the caller
- set_fact:
    state: present
  when:
    - state is undefined

- name: '{{ project }}: Load variables'
  include_vars:
    file: '{{ base }}/vars/projects/{{ project }}.yml'

- set_fact:
    resolved: {}

- name: '{{ project }}: Verify mappings'
  fail:
    msg: 'No mappings defined for {{ item }}'
  loop:
    '{{ packages }}'
  when:
    - mappings[item] is undefined

- name: '{{ project }}: Look up mappings (default)'
  set_fact:
    resolved: '{{ resolved|combine({ item: mappings[item]["default"] }) }}'
  loop:
    '{{ packages }}'
  when:
    - mappings[item]["default"] is defined

- name: '{{ project }}: Look up mappings (package format)'
  set_fact:
    resolved: '{{ resolved|combine({ item: mappings[item][packaging.format] }) }}'
  loop:
    '{{ packages }}'
  when:
    - mappings[item][packaging.format] is defined

- name: '{{ project }}: Look up mappings (OS name)'
  set_fact:
    resolved: '{{ resolved|combine({ item: mappings[item][os.name] }) }}'
  loop:
    '{{ packages }}'
  when:
    - mappings[item][os.name] is defined

- name: '{{ project }}: Look up mappings (OS version)'
  set_fact:
    resolved: '{{ resolved|combine({ item: mappings[item][os.name + os.version] }) }}'
  loop:
    '{{ packages }}'
  when:
    - mappings[item][os.name + os.version] is defined

- name: '{{ project }}: Look up mappings (arch with default)'
  set_fact:
    resolved: '{{ resolved|combine({ item: mappings[item]["x86_64" + "-" + "default"] }) }}'
  loop:
    '{{ packages }}'
  when:
    - mappings[item]["x86_64" + "-" + "default"] is defined

- name: '{{ project }}: Look up mappings (arch with package format)'
  set_fact:
    resolved: '{{ resolved|combine({ item: mappings[item]["x86_64" + "-" + packaging.format] }) }}'
  loop:
    '{{ packages }}'
  when:
    - mappings[item]["x86_64" + "-" + packaging.format] is defined

- name: '{{ project }}: Look up mappings (arch with OS name)'
  set_fact:
    resolved: '{{ resolved|combine({ item: mappings[item]["x86_64" + "-" + os.name] }) }}'
  loop:
    '{{ packages }}'
  when:
    - mappings[item]["x86_64" + "-" + os.name] is defined

- name: '{{ project }}: Look up mappings (arch with OS version)'
  set_fact:
    resolved: '{{ resolved|combine({ item: mappings[item]["x86_64" + "-" + os.name + os.version] }) }}'
  loop:
    '{{ packages }}'
  when:
    - mappings[item]["x86_64" + "-" + os.name + os.version] is defined

- set_fact:
    flattened: []

- name: '{{ project }}: Flatten package list'
  set_fact:
    flattened: '{{ flattened }} + [ "{{ resolved[item] }}" ]'
  loop:
    '{{ resolved|flatten(levels=1) }}'
  when:
    - resolved[item] != None
    - resolved[item] not in flattened

- name: '{{ project }}: Install/remove packages (state={{ state }})'
  package:
    name: '{{ flattened|sort }}'
    state: '{{ state }}'

- set_fact:
    pip_resolved: {}

- name: '{{ project }}: Verify pip mappings'
  fail:
    msg: 'No mappings defined for {{ item }}'
  loop:
    '{{ packages }}'
  when:
    - mappings[item] is undefined
    - pip_mappings[item] is undefined

- name: '{{ project }}: Look up pip mappings (default)'
  set_fact:
    pip_resolved: '{{ pip_resolved|combine({ item: pip_mappings[item]["default"] }) }}'
  loop:
    '{{ packages }}'
  when:
    - pip_mappings[item]["default"] is defined

- name: '{{ project }}: Remove unwanted pip mappings'
  set_fact:
    pip_resolved: '{{ pip_resolved|combine({ item: None }) }}'
  loop:
    '{{ packages }}'
  when:
    - resolved[item] is defined
    - resolved[item] != None

- set_fact:
    pip_flattened: []

- name: '{{ project }}: Flatten pip package list'
  set_fact:
    pip_flattened: '{{ pip_flattened }} + [ "{{ pip_resolved[item] }}" ]'
  loop:
    '{{ pip_resolved|flatten(levels=1) }}'
  when:
    - pip_resolved[item] != None
    - pip_resolved[item] not in pip_flattened

- name: '{{ project }}: Install packages from pip (state={{ state }})'
  command: 'pip3 install {{ item }}'
  args:
    warn: no
  loop:
    '{{ pip_flattened|sort }}'
