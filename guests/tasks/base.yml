---
- name: Set additional facts (OS)
  set_fact:
    os_name: '{{ ansible_distribution }}'
    os_version: '{{ ansible_distribution_major_version }}'
  when:
    - ansible_distribution != 'FreeBSD'
    - ansible_distribution_release != 'Rawhide'

- name: Set additional facts (OS)
  set_fact:
    os_name: '{{ ansible_distribution }}'
    os_version: Rawhide
  when:
    - ansible_distribution != 'FreeBSD'
    - ansible_distribution_release == 'Rawhide'

- name: Set additional facts (OS)
  set_fact:
    os_name: '{{ ansible_distribution }}'
    os_version: '{{ ansible_distribution_release|regex_replace("^(\d+)\.\d+-.*$", "\1") }}'
  when:
    - ansible_distribution == 'FreeBSD'

- name: Set additional facts (package format)
  set_fact:
    package_format: deb
  when:
    - ( os_name == 'Debian' or
        os_name == 'Ubuntu' )

- name: Set additional facts (package format)
  set_fact:
    package_format: pkg
  when:
    - os_name == 'FreeBSD'

- name: Set additional facts (package format)
  set_fact:
    package_format: rpm
  when:
    - ( os_name == 'CentOS' or
        os_name == 'Fedora' )

- name: Bootstrap the package module
  command: apt-get install -y python-apt
  args:
    creates: /usr/lib/python2*/*-packages/apt
    warn: no
  when:
    - package_format == 'deb'

- name: Bootstrap the package module
  command: dnf install -y python2-dnf
  args:
    creates: /usr/lib*/python2*/*-packages/dnf
    warn: no
  when:
    - os_name == 'Fedora'

- name: Permit file editing on SELinux-enabled systems
  package:
    name: libselinux-python
    state: present
  when:
    - ( os_name == 'CentOS' or
        os_name == 'Fedora' )

- name: Enable jessie-backports repository
  copy:
    src: files/jessie-backports.sources
    dest: /etc/apt/sources.list.d/jessie-backports.list
    owner: root
    group: root
  when:
    - os_name == 'Debian'
    - os_version == '8'

- name: Configure APT pinning for jessie-backports
  copy:
    src: files/jessie-backports.preferences
    dest: /etc/apt/preferences.d/jessie-backports
    owner: root
    group: root
  when:
    - os_name == 'Debian'
    - os_version == '8'

- name: Enable fedora-rawhide-kernel-nodebug repository
  copy:
    src: files/fedora-rawhide-kernel-nodebug.repo
    dest: /etc/yum.repos.d/fedora-rawhide-kernel-nodebug.repo
    owner: root
    group: root
  when:
    - os_name == 'Fedora'
    - os_version == 'Rawhide'

- name: Update installed packages
  package:
    name: '*'
    state: latest
  when:
    - package_format == 'rpm'

- name: Update installed packages
  apt:
    upgrade: dist
    update_cache: yes
  when:
    - package_format == 'deb'

- name: Update installed packages
  shell: pkg update && pkg upgrade -y
  when:
    - package_format == 'pkg'

- name: Remove unwanted packages
  package:
    name: '{{ item }}'
    state: absent
  with_items:
    - nano

- name: Configure hostname
  hostname:
    name: '{{ inventory_hostname }}'

- name: Configure ssh access for the root user
  authorized_key:
    user: root
    key: '{{ lookup("file", lookup("env", "HOME") + "/.ssh/id_rsa.pub") }}'
    state: present

- name: Configure root password and shell
  user:
    name: root
    password: '{{ lookup("file", root_password_file) }}'
    shell: '{{ bash }}'

- name: Disable password authentication for the root user
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#*\s*PermitRootLogin\s*.*$'
    line: 'PermitRootLogin without-password'
    state: present
    backup: yes

- name: Look for GRUB2 configuration
  stat:
    path: /etc/default/grub
  register: grubdefault

- name: Look for GRUB2 configuration
  stat:
    path: /boot/grub/grub.cfg
  register: grubcfg

- name: Look for GRUB2 configuration
  stat:
    path: /boot/grub2/grub.cfg
  register: grub2cfg

- name: Configure GRUB2
  lineinfile:
    path: /etc/default/grub
    regexp: '^{{ item.key }}=.*$'
    line: '{{ item.key }}="{{ item.value }}"'
    backup: yes
  with_items:
    - { key: 'GRUB_TIMEOUT', value: '1' }
    - { key: 'GRUB_CMDLINE_LINUX_DEFAULT', value: 'console=ttyS0' }
    - { key: 'GRUB_CMDLINE_LINUX', value: 'console=ttyS0' }
    - { key: 'GRUB_TERMINAL', value: 'serial' }
    - { key: 'GRUB_SERIAL_COMMAND', value: 'serial' }
  when:
    - grubdefault.stat.exists

- name: Apply GRUB2 configuration
  command: 'grub-mkconfig -o /boot/grub/grub.cfg'
  when:
    - grubcfg.stat.exists

- name: Apply GRUB2 configuration
  command: 'grub2-mkconfig -o /boot/grub2/grub.cfg'
  when:
    - grub2cfg.stat.exists

- name: Configure the FreeBSD bootloader
  lineinfile:
    path: /boot/loader.conf
    regexp: '^{{ item.key }}=.*$'
    line: '{{ item.key }}="{{ item.value }}"'
    create: yes
    backup: yes
  with_items:
    - { key: 'console', value: 'comconsole' }
    - { key: 'autoboot_delay', value: '1' }
  when:
    - os_name == 'FreeBSD'
